{"ast":null,"code":"var _jsxFileName = \"E:\\\\ScrambleP\\\\Scramble-Puzzle\\\\frontend\\\\src\\\\components\\\\PuzzleBoard.js\";\n//src/components/PuzzleBoard.js\nimport React from 'react';\nimport './PuzzleBoard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PuzzleBoard({\n  puzzle,\n  level,\n  image,\n  onTileClick\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"puzzle-board-container\",\n    style: {\n      display: 'grid',\n      gridTemplateColumns: `repeat(${level}, 1fr)`,\n      gridTemplateRows: `repeat(${level}, 1fr)`,\n      gap: '0px'\n    },\n    children: puzzle.map((tileValue, index) => {\n      const originalRow = Math.floor(tileValue / level);\n      const originalCol = tileValue % level;\n      const isEmptyTile = tileValue === level * level - 1;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `puzzle-tile ${isEmptyTile ? 'empty-tile' : 'filled-tile'}`,\n        style: {\n          backgroundImage: isEmptyTile ? 'none' : `url(${image})`,\n          backgroundSize: `${level * 100}% ${level * 100}%`,\n          backgroundPosition: `${originalCol * 100 / (level - 1)}% ${originalRow * 100 / (level - 1)}%`\n        },\n        onClick: () => onTileClick(index),\n        children: !isEmptyTile && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"tile-number\",\n          children: tileValue + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 29\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 9\n  }, this);\n}\n_c = PuzzleBoard;\nexport default PuzzleBoard;\nvar _c;\n$RefreshReg$(_c, \"PuzzleBoard\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","PuzzleBoard","puzzle","level","image","onTileClick","className","style","display","gridTemplateColumns","gridTemplateRows","gap","children","map","tileValue","index","originalRow","Math","floor","originalCol","isEmptyTile","backgroundImage","backgroundSize","backgroundPosition","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/ScrambleP/Scramble-Puzzle/frontend/src/components/PuzzleBoard.js"],"sourcesContent":["//src/components/PuzzleBoard.js\r\nimport React from 'react';\r\nimport './PuzzleBoard.css';\r\n\r\nfunction PuzzleBoard({ puzzle, level, image, onTileClick }) {\r\n    return (\r\n        <div\r\n            className=\"puzzle-board-container\"\r\n            style={{\r\n                display: 'grid',\r\n                gridTemplateColumns: `repeat(${level}, 1fr)`,\r\n                gridTemplateRows: `repeat(${level}, 1fr)`,\r\n                gap: '0px',\r\n            }}\r\n        >\r\n            {puzzle.map((tileValue, index) => {\r\n                const originalRow = Math.floor(tileValue / level);\r\n                const originalCol = tileValue % level;\r\n                const isEmptyTile = tileValue === level * level - 1;\r\n\r\n                return (\r\n                    <div\r\n                        key={index}\r\n                        className={`puzzle-tile ${isEmptyTile ? 'empty-tile' : 'filled-tile'}`}\r\n                        style={{\r\n                            backgroundImage: isEmptyTile ? 'none' : `url(${image})`,\r\n                            backgroundSize: `${level * 100}% ${level * 100}%`,\r\n                            backgroundPosition: `${(originalCol * 100) / (level - 1)}% ${(originalRow * 100) / (level - 1)}%`,\r\n                        }}\r\n                        onClick={() => onTileClick(index)}\r\n                    >\r\n                        {!isEmptyTile && (\r\n                            <span className=\"tile-number\">\r\n                                {tileValue + 1}\r\n                            </span>\r\n                        )}\r\n                    </div>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PuzzleBoard;\r\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,SAASC,WAAWA,CAAC;EAAEC,MAAM;EAAEC,KAAK;EAAEC,KAAK;EAAEC;AAAY,CAAC,EAAE;EACxD,oBACIL,OAAA;IACIM,SAAS,EAAC,wBAAwB;IAClCC,KAAK,EAAE;MACHC,OAAO,EAAE,MAAM;MACfC,mBAAmB,EAAE,UAAUN,KAAK,QAAQ;MAC5CO,gBAAgB,EAAE,UAAUP,KAAK,QAAQ;MACzCQ,GAAG,EAAE;IACT,CAAE;IAAAC,QAAA,EAEDV,MAAM,CAACW,GAAG,CAAC,CAACC,SAAS,EAAEC,KAAK,KAAK;MAC9B,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACJ,SAAS,GAAGX,KAAK,CAAC;MACjD,MAAMgB,WAAW,GAAGL,SAAS,GAAGX,KAAK;MACrC,MAAMiB,WAAW,GAAGN,SAAS,KAAKX,KAAK,GAAGA,KAAK,GAAG,CAAC;MAEnD,oBACIH,OAAA;QAEIM,SAAS,EAAE,eAAec,WAAW,GAAG,YAAY,GAAG,aAAa,EAAG;QACvEb,KAAK,EAAE;UACHc,eAAe,EAAED,WAAW,GAAG,MAAM,GAAG,OAAOhB,KAAK,GAAG;UACvDkB,cAAc,EAAE,GAAGnB,KAAK,GAAG,GAAG,KAAKA,KAAK,GAAG,GAAG,GAAG;UACjDoB,kBAAkB,EAAE,GAAIJ,WAAW,GAAG,GAAG,IAAKhB,KAAK,GAAG,CAAC,CAAC,KAAMa,WAAW,GAAG,GAAG,IAAKb,KAAK,GAAG,CAAC,CAAC;QAClG,CAAE;QACFqB,OAAO,EAAEA,CAAA,KAAMnB,WAAW,CAACU,KAAK,CAAE;QAAAH,QAAA,EAEjC,CAACQ,WAAW,iBACTpB,OAAA;UAAMM,SAAS,EAAC,aAAa;UAAAM,QAAA,EACxBE,SAAS,GAAG;QAAC;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACZ;MACT,GAbIb,KAAK;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAcT,CAAC;IAEd,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd;AAACC,EAAA,GArCQ5B,WAAW;AAuCpB,eAAeA,WAAW;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}