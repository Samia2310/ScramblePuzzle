{"ast":null,"code":"var _jsxFileName = \"E:\\\\ScrambleP\\\\Scramble-Puzzle\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';\nimport PuzzleBoard from './components/PuzzleBoard';\nimport Controls from './components/Controls';\nimport GameOverModal from './components/GameOverModal';\nimport StartPage from './components/StartPage';\nimport ImageSelectionModal from './components/ImageSelectionModal';\nimport { generateSolvablePuzzle, isSolved } from './utils/puzzleUtils';\nimport { updateHighScore as updateLocalHighScore, getBestScoreForImage as getLocalBestScoreForImage } from './utils/scoreUtils';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [level, setLevel] = useState(4);\n  const [currentImage, setCurrentImage] = useState(0);\n  const [puzzle, setPuzzle] = useState([]);\n  const [moves, setMoves] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [isNewHighScore, setIsNewHighScore] = useState(false);\n  const [hasPlayedVictorySound, setHasPlayedVictorySound] = useState(false);\n  const [currentPage, setCurrentPage] = useState('startPage');\n  const [isImageSelectionModalOpen, setIsImageSelectionModalOpen] = useState(false);\n  const images = useMemo(() => ['/images/morning_sunflower.jpg', '/images/garden_whisper.jpg', '/images/country_road.jpg', '/images/acoustic_rhapsody.jpg', '/images/sunset_sips_&_snacks.jpg', '/images/whimsy_popaye.jpg', '/images/lilac_scoop.jpg', '/images/retro_ride.jpg', '/images/sugarplum_brew.jpg', '/images/frienemies_forever.jpg', '/images/playful_world.jpg', '/images/road_to_success.jpg', '/images/bloom_&_capture.jpg', '/images/paper_pilot.jpg', '/images/morning_flavors.jpg', '/images/happy_haul.jpg', '/images/toasted_morning.jpg', '/images/floral_timepiece.jpg', '/images/crispy_fizz_craving.jpg', '/images/mystic_melodies.jpg', '/images/pink_parcel_express.jpg', '/images/latte_canvas.jpg', '/images/adorable_jerry.jpg', '/images/old-school_call.jpg', '/images/FRIENDS.jpg', '/images/autumn_serenity.jpg', '/images/scooby_adventure.jpg', '/images/miniature_monsoon.jpg', '/images/daisy_time_ride.jpg', '/images/tranquil_voyage.jpg', '/images/emergency_escape.jpg', '/images/whispercore.jpg', '/images/paper_sky_&_beyond.jpg', '/images/mathematics_melodies.jpg', '/images/crimson_clouds.jpg', '/images/wanderLens.jpg', '/images/sunny_side_ride.jpg', '/images/sweet_slice.jpg', '/images/chromatic_cassette.jpg', '/images/capture_moments.jpg', '/images/crafty_kit.jpg', '/images/creative_corner.jpg', '/images/bean_&_teddy.jpg', '/images/countryside_cafe.jpg', '/images/spring_toast.jpg', '/images/storybook_sanctuary.jpg', '/images/roadside_tastes.jpg', '/images/painted_panorama.jpg', '/images/mystical_moonlight.jpg', '/images/gifting_happiness.jpg'], []);\n  const slideAudioRef = useRef(null);\n  const levelSolvedAudioRef = useRef(null);\n  const startPageClickAudioRef = useRef(null);\n  const buttonClickAudioRef = useRef(null);\n  const formatImageName = useCallback(imagePath => {\n    const filename = imagePath.split('/').pop();\n    const nameWithoutExtension = filename.split('.')[0];\n    const withSpaces = nameWithoutExtension.replace(/_/g, ' ');\n    return withSpaces.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n  }, []);\n  useEffect(() => {\n    slideAudioRef.current = new Audio('/audios/puzzleSlide.wav');\n    slideAudioRef.current.volume = 1.0;\n    levelSolvedAudioRef.current = new Audio('/audios/victory.wav');\n    levelSolvedAudioRef.current.volume = 0.5;\n    levelSolvedAudioRef.current.playbackRate = 1.2;\n    startPageClickAudioRef.current = new Audio('/audios/startPageClick.wav');\n    startPageClickAudioRef.current.volume = 1.0;\n    buttonClickAudioRef.current = new Audio('/audios/click.wav');\n    buttonClickAudioRef.current.volume = 1.0;\n  }, []);\n  const startNewGame = useCallback(() => {\n    const newPuzzle = generateSolvablePuzzle(level);\n    setPuzzle(newPuzzle);\n    setMoves(0);\n    setGameOver(false);\n    setIsNewHighScore(false);\n    setHasPlayedVictorySound(false);\n  }, [level]);\n  const handleStartPageButtonClick = useCallback(() => {\n    if (startPageClickAudioRef.current) {\n      startPageClickAudioRef.current.currentTime = 0;\n      startPageClickAudioRef.current.play().catch(e => console.error(\"Start page click sound error:\", e));\n    }\n  }, []);\n  const handleButtonClick = useCallback(() => {\n    if (buttonClickAudioRef.current) {\n      buttonClickAudioRef.current.currentTime = 0;\n      buttonClickAudioRef.current.play().catch(e => console.error(\"Button click sound error:\", e));\n    }\n  }, []);\n  const handleSelectLevel = useCallback(selectedLevel => {\n    handleStartPageButtonClick();\n    setLevel(selectedLevel);\n    setCurrentImage(Math.floor(Math.random() * images.length));\n    setCurrentPage('gamePage');\n  }, [images.length, handleStartPageButtonClick]);\n  const handleImageSelected = useCallback(index => {\n    handleButtonClick();\n    setCurrentImage(index);\n    setIsImageSelectionModalOpen(false);\n    setGameOver(false);\n    setMoves(0);\n    setIsNewHighScore(false);\n    setHasPlayedVictorySound(false);\n  }, [handleButtonClick]);\n  const checkAndSubmitHighScore = useCallback(() => {\n    const levelKey = level === 2 ? 'veryEasy' : level === 3 ? 'easy' : level === 4 ? 'medium' : 'hard';\n    const rawImageName = images[currentImage].split('/').pop();\n    const newScoreSet = updateLocalHighScore(levelKey, rawImageName, moves);\n    setIsNewHighScore(newScoreSet);\n  }, [moves, level, currentImage, images]);\n  useEffect(() => {\n    if (currentPage === 'gamePage') {\n      startNewGame();\n    }\n  }, [level, currentImage, currentPage, startNewGame]);\n  useEffect(() => {\n    if (puzzle.length > 0 && isSolved(puzzle, level)) {\n      if (!hasPlayedVictorySound) {\n        setHasPlayedVictorySound(true);\n        if (levelSolvedAudioRef.current) {\n          levelSolvedAudioRef.current.currentTime = 0;\n          levelSolvedAudioRef.current.play().catch(e => console.error(\"Victory sound error:\", e));\n          setTimeout(() => {\n            levelSolvedAudioRef.current.pause();\n            levelSolvedAudioRef.current.currentTime = 0;\n          }, 8000);\n        }\n        setTimeout(() => {\n          setGameOver(true);\n          checkAndSubmitHighScore();\n        }, 2000);\n      }\n    }\n  }, [puzzle, level, checkAndSubmitHighScore, hasPlayedVictorySound]);\n  const handleTileClick = index => {\n    if (gameOver) return;\n    const emptyIndex = puzzle.indexOf(level * level - 1);\n    const row = Math.floor(index / level);\n    const col = index % level;\n    const emptyRow = Math.floor(emptyIndex / level);\n    const emptyCol = emptyIndex % level;\n    const canMove = Math.abs(row - emptyRow) === 1 && col === emptyCol || Math.abs(col - emptyCol) === 1 && row === emptyRow;\n    if (canMove) {\n      const newPuzzle = [...puzzle];\n      [newPuzzle[index], newPuzzle[emptyIndex]] = [newPuzzle[emptyIndex], newPuzzle[index]];\n      setPuzzle(newPuzzle);\n      setMoves(m => m + 1);\n      if (slideAudioRef.current) {\n        slideAudioRef.current.currentTime = 0;\n        slideAudioRef.current.play().catch(err => console.warn(\"Slide sound error:\", err));\n      }\n    }\n  };\n  const handleNextLevel = () => {\n    handleButtonClick();\n    if (currentImage < images.length - 1) {\n      setCurrentImage(prev => prev + 1);\n      startNewGame();\n    } else {\n      alert(\"You've completed all images! Returning to home.\");\n      handleExitToHome();\n    }\n  };\n  const handleShuffle = () => {\n    handleButtonClick();\n    startNewGame();\n  };\n  const handleExitToHome = () => {\n    handleButtonClick();\n    setGameOver(false);\n    setCurrentPage('startPage');\n    setPuzzle([]);\n    setMoves(0);\n    setIsNewHighScore(false);\n    setHasPlayedVictorySound(false);\n  };\n  const levelKey = level === 2 ? 'veryEasy' : level === 3 ? 'easy' : level === 4 ? 'medium' : 'hard';\n  const rawImageName = images[currentImage].split('/').pop();\n  const bestScore = getLocalBestScoreForImage(levelKey, rawImageName);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [currentPage === 'startPage' && /*#__PURE__*/_jsxDEV(StartPage, {\n      onSelectLevel: handleSelectLevel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 17\n    }, this), currentPage === 'gamePage' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-page-layout\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-controls-and-highscores-top-right\",\n        children: /*#__PURE__*/_jsxDEV(Controls, {\n          moves: moves\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 21\n      }, this), bestScore > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"best-score-display\",\n        children: [\"\\uD83C\\uDFC6 Best Score for this level: \", bestScore]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"puzzle-board-center\",\n        children: /*#__PURE__*/_jsxDEV(PuzzleBoard, {\n          puzzle: puzzle,\n          level: level,\n          image: images[currentImage],\n          onTileClick: handleTileClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"puzzle-action-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextLevel,\n          className: \"next-image-button\",\n          children: \"Next Image \\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleShuffle,\n          className: \"shuffle-button\",\n          children: \"Shuffle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleExitToHome,\n          className: \"go-to-homepage-button\",\n          children: \"Go to Homepage\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-image-preview-bottom-left\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: images[currentImage],\n          alt: `Current Puzzle Reference: ${formatImageName(images[currentImage])}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: formatImageName(images[currentImage])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            handleButtonClick();\n            setIsImageSelectionModalOpen(true);\n          },\n          className: \"choose-image-button\",\n          children: \"Choose Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 21\n      }, this), gameOver && /*#__PURE__*/_jsxDEV(GameOverModal, {\n        image: images[currentImage],\n        moves: moves,\n        isNewHighScore: isNewHighScore,\n        onPlayAgain: startNewGame,\n        onNextLevel: handleNextLevel,\n        onExitToHome: handleExitToHome,\n        bestScore: bestScore,\n        onButtonClick: handleButtonClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 25\n      }, this), isImageSelectionModalOpen && /*#__PURE__*/_jsxDEV(ImageSelectionModal, {\n        images: images,\n        onClose: () => {\n          handleButtonClick();\n          setIsImageSelectionModalOpen(false);\n        },\n        onSelectImage: handleImageSelected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"5t8QlAc7N8x968KKHk4VzGr6lMQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","useMemo","PuzzleBoard","Controls","GameOverModal","StartPage","ImageSelectionModal","generateSolvablePuzzle","isSolved","updateHighScore","updateLocalHighScore","getBestScoreForImage","getLocalBestScoreForImage","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","level","setLevel","currentImage","setCurrentImage","puzzle","setPuzzle","moves","setMoves","gameOver","setGameOver","isNewHighScore","setIsNewHighScore","hasPlayedVictorySound","setHasPlayedVictorySound","currentPage","setCurrentPage","isImageSelectionModalOpen","setIsImageSelectionModalOpen","images","slideAudioRef","levelSolvedAudioRef","startPageClickAudioRef","buttonClickAudioRef","formatImageName","imagePath","filename","split","pop","nameWithoutExtension","withSpaces","replace","map","word","charAt","toUpperCase","slice","join","current","Audio","volume","playbackRate","startNewGame","newPuzzle","handleStartPageButtonClick","currentTime","play","catch","e","console","error","handleButtonClick","handleSelectLevel","selectedLevel","Math","floor","random","length","handleImageSelected","index","checkAndSubmitHighScore","levelKey","rawImageName","newScoreSet","setTimeout","pause","handleTileClick","emptyIndex","indexOf","row","col","emptyRow","emptyCol","canMove","abs","m","err","warn","handleNextLevel","prev","alert","handleExitToHome","handleShuffle","bestScore","children","onSelectLevel","fileName","_jsxFileName","lineNumber","columnNumber","className","image","onTileClick","onClick","src","alt","onPlayAgain","onNextLevel","onExitToHome","onButtonClick","onClose","onSelectImage","_c","$RefreshReg$"],"sources":["E:/ScrambleP/Scramble-Puzzle/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';\r\nimport PuzzleBoard from './components/PuzzleBoard';\r\nimport Controls from './components/Controls';\r\nimport GameOverModal from './components/GameOverModal';\r\nimport StartPage from './components/StartPage';\r\nimport ImageSelectionModal from './components/ImageSelectionModal';\r\nimport { generateSolvablePuzzle, isSolved } from './utils/puzzleUtils';\r\nimport {\r\n    updateHighScore as updateLocalHighScore,\r\n    getBestScoreForImage as getLocalBestScoreForImage,\r\n} from './utils/scoreUtils';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n    const [level, setLevel] = useState(4);\r\n    const [currentImage, setCurrentImage] = useState(0);\r\n    const [puzzle, setPuzzle] = useState([]);\r\n    const [moves, setMoves] = useState(0);\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const [isNewHighScore, setIsNewHighScore] = useState(false);\r\n    const [hasPlayedVictorySound, setHasPlayedVictorySound] = useState(false);\r\n    const [currentPage, setCurrentPage] = useState('startPage');\r\n    const [isImageSelectionModalOpen, setIsImageSelectionModalOpen] = useState(false);\r\n\r\n    const images = useMemo(() => [\r\n        '/images/morning_sunflower.jpg', '/images/garden_whisper.jpg',\r\n        '/images/country_road.jpg', '/images/acoustic_rhapsody.jpg',\r\n        '/images/sunset_sips_&_snacks.jpg', '/images/whimsy_popaye.jpg',\r\n        '/images/lilac_scoop.jpg', '/images/retro_ride.jpg',\r\n        '/images/sugarplum_brew.jpg', '/images/frienemies_forever.jpg',\r\n        '/images/playful_world.jpg', '/images/road_to_success.jpg',\r\n        '/images/bloom_&_capture.jpg', '/images/paper_pilot.jpg',\r\n        '/images/morning_flavors.jpg', '/images/happy_haul.jpg',\r\n        '/images/toasted_morning.jpg', '/images/floral_timepiece.jpg',\r\n        '/images/crispy_fizz_craving.jpg', '/images/mystic_melodies.jpg',\r\n        '/images/pink_parcel_express.jpg', '/images/latte_canvas.jpg',\r\n        '/images/adorable_jerry.jpg', '/images/old-school_call.jpg',\r\n        '/images/FRIENDS.jpg', '/images/autumn_serenity.jpg',\r\n        '/images/scooby_adventure.jpg', '/images/miniature_monsoon.jpg',\r\n        '/images/daisy_time_ride.jpg', '/images/tranquil_voyage.jpg',\r\n        '/images/emergency_escape.jpg', '/images/whispercore.jpg',\r\n        '/images/paper_sky_&_beyond.jpg', '/images/mathematics_melodies.jpg',\r\n        '/images/crimson_clouds.jpg', '/images/wanderLens.jpg',\r\n        '/images/sunny_side_ride.jpg', '/images/sweet_slice.jpg',\r\n        '/images/chromatic_cassette.jpg', '/images/capture_moments.jpg',\r\n        '/images/crafty_kit.jpg', '/images/creative_corner.jpg',\r\n        '/images/bean_&_teddy.jpg', '/images/countryside_cafe.jpg',\r\n        '/images/spring_toast.jpg', '/images/storybook_sanctuary.jpg',\r\n        '/images/roadside_tastes.jpg', '/images/painted_panorama.jpg',\r\n        '/images/mystical_moonlight.jpg', '/images/gifting_happiness.jpg'\r\n    ], []);\r\n\r\n    const slideAudioRef = useRef(null);\r\n    const levelSolvedAudioRef = useRef(null);\r\n    const startPageClickAudioRef = useRef(null);\r\n    const buttonClickAudioRef = useRef(null);\r\n\r\n    const formatImageName = useCallback((imagePath) => {\r\n        const filename = imagePath.split('/').pop();\r\n        const nameWithoutExtension = filename.split('.')[0];\r\n        const withSpaces = nameWithoutExtension.replace(/_/g, ' ');\r\n        return withSpaces\r\n            .split(' ')\r\n            .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n            .join(' ');\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        slideAudioRef.current = new Audio('/audios/puzzleSlide.wav');\r\n        slideAudioRef.current.volume = 1.0;\r\n        levelSolvedAudioRef.current = new Audio('/audios/victory.wav');\r\n        levelSolvedAudioRef.current.volume = 0.5;\r\n        levelSolvedAudioRef.current.playbackRate = 1.2;\r\n        startPageClickAudioRef.current = new Audio('/audios/startPageClick.wav');\r\n        startPageClickAudioRef.current.volume = 1.0;\r\n        buttonClickAudioRef.current = new Audio('/audios/click.wav');\r\n        buttonClickAudioRef.current.volume = 1.0;\r\n    }, []);\r\n\r\n    const startNewGame = useCallback(() => {\r\n        const newPuzzle = generateSolvablePuzzle(level);\r\n        setPuzzle(newPuzzle);\r\n        setMoves(0);\r\n        setGameOver(false);\r\n        setIsNewHighScore(false);\r\n        setHasPlayedVictorySound(false);\r\n    }, [level]);\r\n\r\n    const handleStartPageButtonClick = useCallback(() => {\r\n        if (startPageClickAudioRef.current) {\r\n            startPageClickAudioRef.current.currentTime = 0;\r\n            startPageClickAudioRef.current.play().catch(e =>\r\n                console.error(\"Start page click sound error:\", e)\r\n            );\r\n        }\r\n    }, []);\r\n\r\n    const handleButtonClick = useCallback(() => {\r\n        if (buttonClickAudioRef.current) {\r\n            buttonClickAudioRef.current.currentTime = 0;\r\n            buttonClickAudioRef.current.play().catch(e =>\r\n                console.error(\"Button click sound error:\", e)\r\n            );\r\n        }\r\n    }, []);\r\n\r\n    const handleSelectLevel = useCallback((selectedLevel) => {\r\n        handleStartPageButtonClick();\r\n        setLevel(selectedLevel);\r\n        setCurrentImage(Math.floor(Math.random() * images.length));\r\n        setCurrentPage('gamePage');\r\n    }, [images.length, handleStartPageButtonClick]);\r\n\r\n    const handleImageSelected = useCallback((index) => {\r\n        handleButtonClick();\r\n        setCurrentImage(index);\r\n        setIsImageSelectionModalOpen(false);\r\n        setGameOver(false);\r\n        setMoves(0);\r\n        setIsNewHighScore(false);\r\n        setHasPlayedVictorySound(false);\r\n    }, [handleButtonClick]);\r\n\r\n    const checkAndSubmitHighScore = useCallback(() => {\r\n        const levelKey =\r\n            level === 2 ? 'veryEasy' :\r\n            level === 3 ? 'easy' :\r\n            level === 4 ? 'medium' : 'hard';\r\n\r\n        const rawImageName = images[currentImage].split('/').pop();\r\n        const newScoreSet = updateLocalHighScore(levelKey, rawImageName, moves);\r\n\r\n        setIsNewHighScore(newScoreSet);\r\n    }, [moves, level, currentImage, images]);\r\n\r\n    useEffect(() => {\r\n        if (currentPage === 'gamePage') {\r\n            startNewGame();\r\n        }\r\n    }, [level, currentImage, currentPage, startNewGame]);\r\n\r\n    useEffect(() => {\r\n        if (puzzle.length > 0 && isSolved(puzzle, level)) {\r\n            if (!hasPlayedVictorySound) {\r\n                setHasPlayedVictorySound(true);\r\n                if (levelSolvedAudioRef.current) {\r\n                    levelSolvedAudioRef.current.currentTime = 0;\r\n                    levelSolvedAudioRef.current.play().catch(e =>\r\n                        console.error(\"Victory sound error:\", e)\r\n                    );\r\n                    setTimeout(() => {\r\n                        levelSolvedAudioRef.current.pause();\r\n                        levelSolvedAudioRef.current.currentTime = 0;\r\n                    }, 8000);\r\n                }\r\n                setTimeout(() => {\r\n                    setGameOver(true);\r\n                    checkAndSubmitHighScore();\r\n                }, 2000);\r\n            }\r\n        }\r\n    }, [puzzle, level, checkAndSubmitHighScore, hasPlayedVictorySound]);\r\n\r\n    const handleTileClick = (index) => {\r\n        if (gameOver) return;\r\n        const emptyIndex = puzzle.indexOf(level * level - 1);\r\n        const row = Math.floor(index / level);\r\n        const col = index % level;\r\n        const emptyRow = Math.floor(emptyIndex / level);\r\n        const emptyCol = emptyIndex % level;\r\n        const canMove =\r\n            (Math.abs(row - emptyRow) === 1 && col === emptyCol) ||\r\n            (Math.abs(col - emptyCol) === 1 && row === emptyRow);\r\n\r\n        if (canMove) {\r\n            const newPuzzle = [...puzzle];\r\n            [newPuzzle[index], newPuzzle[emptyIndex]] = [newPuzzle[emptyIndex], newPuzzle[index]];\r\n            setPuzzle(newPuzzle);\r\n            setMoves(m => m + 1);\r\n            if (slideAudioRef.current) {\r\n                slideAudioRef.current.currentTime = 0;\r\n                slideAudioRef.current.play().catch(err =>\r\n                    console.warn(\"Slide sound error:\", err)\r\n                );\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleNextLevel = () => {\r\n        handleButtonClick();\r\n        if (currentImage < images.length - 1) {\r\n            setCurrentImage(prev => prev + 1);\r\n            startNewGame();\r\n        } else {\r\n            alert(\"You've completed all images! Returning to home.\");\r\n            handleExitToHome();\r\n        }\r\n    };\r\n\r\n    const handleShuffle = () => {\r\n        handleButtonClick();\r\n        startNewGame();\r\n    };\r\n\r\n    const handleExitToHome = () => {\r\n        handleButtonClick();\r\n        setGameOver(false);\r\n        setCurrentPage('startPage');\r\n        setPuzzle([]);\r\n        setMoves(0);\r\n        setIsNewHighScore(false);\r\n        setHasPlayedVictorySound(false);\r\n    };\r\n\r\n    const levelKey =\r\n        level === 2 ? 'veryEasy' :\r\n        level === 3 ? 'easy' :\r\n        level === 4 ? 'medium' : 'hard';\r\n\r\n    const rawImageName = images[currentImage].split('/').pop();\r\n    const bestScore = getLocalBestScoreForImage(levelKey, rawImageName);\r\n\r\n    return (\r\n        <>\r\n            {currentPage === 'startPage' && (\r\n                <StartPage onSelectLevel={handleSelectLevel} />\r\n            )}\r\n            {currentPage === 'gamePage' && (\r\n                <div className=\"game-page-layout\">\r\n                    <div className=\"game-controls-and-highscores-top-right\">\r\n                        <Controls moves={moves} />\r\n                    </div>\r\n                    {bestScore > 0 && (\r\n                        <div className=\"best-score-display\">\r\n                            🏆 Best Score for this level: {bestScore}\r\n                        </div>\r\n                    )}\r\n                    <div className=\"puzzle-board-center\">\r\n                        <PuzzleBoard\r\n                            puzzle={puzzle}\r\n                            level={level}\r\n                            image={images[currentImage]}\r\n                            onTileClick={handleTileClick}\r\n                        />\r\n                    </div>\r\n                    <div className=\"puzzle-action-buttons\">\r\n                        <button onClick={handleNextLevel} className=\"next-image-button\">\r\n                            Next Image →\r\n                        </button>\r\n                        <button onClick={handleShuffle} className=\"shuffle-button\">\r\n                            Shuffle\r\n                        </button>\r\n                        <button onClick={handleExitToHome} className=\"go-to-homepage-button\">\r\n                            Go to Homepage\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"current-image-preview-bottom-left\">\r\n                        <img\r\n                            src={images[currentImage]}\r\n                            alt={`Current Puzzle Reference: ${formatImageName(images[currentImage])}`}\r\n                        />\r\n                        <p>{formatImageName(images[currentImage])}</p>\r\n                        <button\r\n                            onClick={() => {\r\n                                handleButtonClick();\r\n                                setIsImageSelectionModalOpen(true);\r\n                            }}\r\n                            className=\"choose-image-button\"\r\n                        >\r\n                            Choose Image\r\n                        </button>\r\n                    </div>\r\n\r\n                    {gameOver && (\r\n                        <GameOverModal\r\n                            image={images[currentImage]}\r\n                            moves={moves}\r\n                            isNewHighScore={isNewHighScore}\r\n                            onPlayAgain={startNewGame}\r\n                            onNextLevel={handleNextLevel}\r\n                            onExitToHome={handleExitToHome}\r\n                            bestScore={bestScore}\r\n                            onButtonClick={handleButtonClick}\r\n                        />\r\n                    )}\r\n\r\n                    {isImageSelectionModalOpen && (\r\n                        <ImageSelectionModal\r\n                            images={images}\r\n                            onClose={() => {\r\n                                handleButtonClick();\r\n                                setIsImageSelectionModalOpen(false);\r\n                            }}\r\n                            onSelectImage={handleImageSelected}\r\n                        />\r\n                    )}\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}