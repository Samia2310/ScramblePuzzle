{"ast":null,"code":"// src/utils/scoreUtils.js\n\nconst HIGH_SCORES_KEY = 'slidePuzzleHighScores';\nfunction initializeDefaultHighScores() {\n  return {\n    veryEasy: {},\n    easy: {},\n    medium: {},\n    hard: {}\n  };\n}\nexport const sanitizeImageNameForStorage = imageName => imageName.replace(/\\./g, '_').replace(/\\//g, '_');\nexport function getHighScores() {\n  try {\n    const scores = JSON.parse(localStorage.getItem(HIGH_SCORES_KEY));\n    if (scores) {\n      const defaultScores = initializeDefaultHighScores();\n      for (const level in defaultScores) {\n        if (!scores[level]) {\n          scores[level] = {};\n        }\n      }\n      return scores;\n    }\n  } catch (e) {\n    console.error(\"Error parsing high scores from Local Storage, initializing new.\", e);\n  }\n  return initializeDefaultHighScores();\n}\nfunction saveHighScores(scores) {\n  try {\n    localStorage.setItem(HIGH_SCORES_KEY, JSON.stringify(scores));\n  } catch (e) {\n    console.error(\"Error saving high scores to Local Storage.\", e);\n  }\n}\nexport function updateHighScore(level, imageName, moves) {\n  const scores = getHighScores();\n  const sanitizedImageName = sanitizeImageNameForStorage(imageName);\n  if (!scores[level]) {\n    scores[level] = {};\n  }\n  const currentScore = scores[level][sanitizedImageName] || Infinity;\n  if (moves > 0 && moves < currentScore) {\n    scores[level][sanitizedImageName] = moves;\n    saveHighScores(scores);\n    return true;\n  }\n  return false;\n}\nexport function getBestScoreForImage(level, imageName) {\n  var _scores$level;\n  const scores = getHighScores();\n  const sanitizedImageName = sanitizeImageNameForStorage(imageName);\n  return (_scores$level = scores[level]) === null || _scores$level === void 0 ? void 0 : _scores$level[sanitizedImageName];\n}","map":{"version":3,"names":["HIGH_SCORES_KEY","initializeDefaultHighScores","veryEasy","easy","medium","hard","sanitizeImageNameForStorage","imageName","replace","getHighScores","scores","JSON","parse","localStorage","getItem","defaultScores","level","e","console","error","saveHighScores","setItem","stringify","updateHighScore","moves","sanitizedImageName","currentScore","Infinity","getBestScoreForImage","_scores$level"],"sources":["E:/ScrambleP/frontend/src/utils/scoreUtils.js"],"sourcesContent":["// src/utils/scoreUtils.js\r\n\r\nconst HIGH_SCORES_KEY = 'slidePuzzleHighScores';\r\n\r\nfunction initializeDefaultHighScores() {\r\n    return {\r\n        veryEasy: {},\r\n        easy: {},\r\n        medium: {},\r\n        hard: {}\r\n    };\r\n}\r\n\r\nexport const sanitizeImageNameForStorage = (imageName) =>\r\n    imageName.replace(/\\./g, '_').replace(/\\//g, '_');\r\n\r\nexport function getHighScores() {\r\n    try {\r\n        const scores = JSON.parse(localStorage.getItem(HIGH_SCORES_KEY));\r\n        if (scores) {\r\n            const defaultScores = initializeDefaultHighScores();\r\n            for (const level in defaultScores) {\r\n                if (!scores[level]) {\r\n                    scores[level] = {};\r\n                }\r\n            }\r\n            return scores;\r\n        }\r\n    } catch (e) {\r\n        console.error(\"Error parsing high scores from Local Storage, initializing new.\", e);\r\n    }\r\n    return initializeDefaultHighScores();\r\n}\r\n\r\nfunction saveHighScores(scores) {\r\n    try {\r\n        localStorage.setItem(HIGH_SCORES_KEY, JSON.stringify(scores));\r\n    } catch (e) {\r\n        console.error(\"Error saving high scores to Local Storage.\", e);\r\n    }\r\n}\r\n\r\nexport function updateHighScore(level, imageName, moves) {\r\n    const scores = getHighScores();\r\n    const sanitizedImageName = sanitizeImageNameForStorage(imageName);\r\n\r\n    if (!scores[level]) {\r\n        scores[level] = {};\r\n    }\r\n\r\n    const currentScore = scores[level][sanitizedImageName] || Infinity;\r\n\r\n    if (moves > 0 && moves < currentScore) {\r\n        scores[level][sanitizedImageName] = moves;\r\n        saveHighScores(scores);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function getBestScoreForImage(level, imageName) {\r\n    const scores = getHighScores();\r\n    const sanitizedImageName = sanitizeImageNameForStorage(imageName);\r\n    return scores[level]?.[sanitizedImageName];\r\n}"],"mappings":"AAAA;;AAEA,MAAMA,eAAe,GAAG,uBAAuB;AAE/C,SAASC,2BAA2BA,CAAA,EAAG;EACnC,OAAO;IACHC,QAAQ,EAAE,CAAC,CAAC;IACZC,IAAI,EAAE,CAAC,CAAC;IACRC,MAAM,EAAE,CAAC,CAAC;IACVC,IAAI,EAAE,CAAC;EACX,CAAC;AACL;AAEA,OAAO,MAAMC,2BAA2B,GAAIC,SAAS,IACjDA,SAAS,CAACC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;AAErD,OAAO,SAASC,aAAaA,CAAA,EAAG;EAC5B,IAAI;IACA,MAAMC,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACd,eAAe,CAAC,CAAC;IAChE,IAAIU,MAAM,EAAE;MACR,MAAMK,aAAa,GAAGd,2BAA2B,CAAC,CAAC;MACnD,KAAK,MAAMe,KAAK,IAAID,aAAa,EAAE;QAC/B,IAAI,CAACL,MAAM,CAACM,KAAK,CAAC,EAAE;UAChBN,MAAM,CAACM,KAAK,CAAC,GAAG,CAAC,CAAC;QACtB;MACJ;MACA,OAAON,MAAM;IACjB;EACJ,CAAC,CAAC,OAAOO,CAAC,EAAE;IACRC,OAAO,CAACC,KAAK,CAAC,iEAAiE,EAAEF,CAAC,CAAC;EACvF;EACA,OAAOhB,2BAA2B,CAAC,CAAC;AACxC;AAEA,SAASmB,cAAcA,CAACV,MAAM,EAAE;EAC5B,IAAI;IACAG,YAAY,CAACQ,OAAO,CAACrB,eAAe,EAAEW,IAAI,CAACW,SAAS,CAACZ,MAAM,CAAC,CAAC;EACjE,CAAC,CAAC,OAAOO,CAAC,EAAE;IACRC,OAAO,CAACC,KAAK,CAAC,4CAA4C,EAAEF,CAAC,CAAC;EAClE;AACJ;AAEA,OAAO,SAASM,eAAeA,CAACP,KAAK,EAAET,SAAS,EAAEiB,KAAK,EAAE;EACrD,MAAMd,MAAM,GAAGD,aAAa,CAAC,CAAC;EAC9B,MAAMgB,kBAAkB,GAAGnB,2BAA2B,CAACC,SAAS,CAAC;EAEjE,IAAI,CAACG,MAAM,CAACM,KAAK,CAAC,EAAE;IAChBN,MAAM,CAACM,KAAK,CAAC,GAAG,CAAC,CAAC;EACtB;EAEA,MAAMU,YAAY,GAAGhB,MAAM,CAACM,KAAK,CAAC,CAACS,kBAAkB,CAAC,IAAIE,QAAQ;EAElE,IAAIH,KAAK,GAAG,CAAC,IAAIA,KAAK,GAAGE,YAAY,EAAE;IACnChB,MAAM,CAACM,KAAK,CAAC,CAACS,kBAAkB,CAAC,GAAGD,KAAK;IACzCJ,cAAc,CAACV,MAAM,CAAC;IACtB,OAAO,IAAI;EACf;EACA,OAAO,KAAK;AAChB;AAEA,OAAO,SAASkB,oBAAoBA,CAACZ,KAAK,EAAET,SAAS,EAAE;EAAA,IAAAsB,aAAA;EACnD,MAAMnB,MAAM,GAAGD,aAAa,CAAC,CAAC;EAC9B,MAAMgB,kBAAkB,GAAGnB,2BAA2B,CAACC,SAAS,CAAC;EACjE,QAAAsB,aAAA,GAAOnB,MAAM,CAACM,KAAK,CAAC,cAAAa,aAAA,uBAAbA,aAAA,CAAgBJ,kBAAkB,CAAC;AAC9C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}